/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RedPacketInterface extends utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "expireTime()": FunctionFragment;
    "grabbed(address)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isEqual()": FunctionFragment;
    "owner()": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "deposit(uint256,bool,uint256)": FunctionFragment;
    "grabRedPacket()": FunctionFragment;
    "getRedPacketInfo()": FunctionFragment;
    "getGrabbedAmount(address)": FunctionFragment;
    "refund()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "count"
      | "expireTime"
      | "grabbed"
      | "isActive"
      | "isEqual"
      | "owner"
      | "totalAmount"
      | "deposit"
      | "grabRedPacket"
      | "getRedPacketInfo"
      | "getGrabbedAmount"
      | "refund"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expireTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "grabbed", values: [string]): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "isEqual", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grabRedPacket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedPacketInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGrabbedAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expireTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grabbed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEqual", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grabRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedPacketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrabbedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;

  events: {
    "DepositMade(address,uint256,uint256,bool,uint256)": EventFragment;
    "GrabSuccess(address,uint256)": EventFragment;
    "RefundMade(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrabSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundMade"): EventFragment;
}

export interface DepositMadeEventObject {
  depositor: string;
  amount: BigNumber;
  count: BigNumber;
  isEqual: boolean;
  expireTime: BigNumber;
}
export type DepositMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, BigNumber],
  DepositMadeEventObject
>;

export type DepositMadeEventFilter = TypedEventFilter<DepositMadeEvent>;

export interface GrabSuccessEventObject {
  grabber: string;
  amount: BigNumber;
}
export type GrabSuccessEvent = TypedEvent<
  [string, BigNumber],
  GrabSuccessEventObject
>;

export type GrabSuccessEventFilter = TypedEventFilter<GrabSuccessEvent>;

export interface RefundMadeEventObject {
  owner: string;
  amount: BigNumber;
}
export type RefundMadeEvent = TypedEvent<
  [string, BigNumber],
  RefundMadeEventObject
>;

export type RefundMadeEventFilter = TypedEventFilter<RefundMadeEvent>;

export interface RedPacket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RedPacketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    expireTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    grabbed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isEqual(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _count: BigNumberish,
      _isEqual: boolean,
      _expireHours: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    grabRedPacket(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRedPacketInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber, boolean] & {
        remaining: BigNumber;
        remainingCount: BigNumber;
        equalDistribution: boolean;
        expiryTime: BigNumber;
        active: boolean;
      }
    >;

    getGrabbedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    refund(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  count(overrides?: CallOverrides): Promise<BigNumber>;

  expireTime(overrides?: CallOverrides): Promise<BigNumber>;

  grabbed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isEqual(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _count: BigNumberish,
    _isEqual: boolean,
    _expireHours: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  grabRedPacket(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRedPacketInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber, boolean] & {
      remaining: BigNumber;
      remainingCount: BigNumber;
      equalDistribution: boolean;
      expiryTime: BigNumber;
      active: boolean;
    }
  >;

  getGrabbedAmount(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  refund(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    expireTime(overrides?: CallOverrides): Promise<BigNumber>;

    grabbed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isEqual(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _count: BigNumberish,
      _isEqual: boolean,
      _expireHours: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grabRedPacket(overrides?: CallOverrides): Promise<void>;

    getRedPacketInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber, boolean] & {
        remaining: BigNumber;
        remainingCount: BigNumber;
        equalDistribution: boolean;
        expiryTime: BigNumber;
        active: boolean;
      }
    >;

    getGrabbedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refund(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DepositMade(address,uint256,uint256,bool,uint256)"(
      depositor?: string | null,
      amount?: null,
      count?: null,
      isEqual?: null,
      expireTime?: null
    ): DepositMadeEventFilter;
    DepositMade(
      depositor?: string | null,
      amount?: null,
      count?: null,
      isEqual?: null,
      expireTime?: null
    ): DepositMadeEventFilter;

    "GrabSuccess(address,uint256)"(
      grabber?: string | null,
      amount?: null
    ): GrabSuccessEventFilter;
    GrabSuccess(grabber?: string | null, amount?: null): GrabSuccessEventFilter;

    "RefundMade(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): RefundMadeEventFilter;
    RefundMade(owner?: string | null, amount?: null): RefundMadeEventFilter;
  };

  estimateGas: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    expireTime(overrides?: CallOverrides): Promise<BigNumber>;

    grabbed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isEqual(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _count: BigNumberish,
      _isEqual: boolean,
      _expireHours: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    grabRedPacket(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRedPacketInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getGrabbedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refund(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expireTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grabbed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEqual(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _count: BigNumberish,
      _isEqual: boolean,
      _expireHours: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grabRedPacket(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRedPacketInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGrabbedAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refund(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
