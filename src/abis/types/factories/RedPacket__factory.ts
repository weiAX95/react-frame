/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RedPacket, RedPacketInterface } from "../RedPacket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isEqual",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expireTime",
        type: "uint256",
      },
    ],
    name: "DepositMade",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "grabber",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "GrabSuccess",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RefundMade",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "expireTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "grabbed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_isEqual",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_expireHours",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "grabRedPacket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRedPacketInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainingCount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "equalDistribution",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "expiryTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getGrabbedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061157a8061005f6000396000f3fe6080604052600436106100c8576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100815780638da5cb5b146101d45780638ff6105a146101ff5780639faf45371461023c578063acbe84521461026b578063c4712e2114610296578063f014beec146102ad576100cf565b806306661abd146100d45780631a39d8ef146100ff57806322f3e2d41461012a578063310a1ee314610155578063590e1ae3146101805780638b8b430b14610197576100cf565b366100cf57005b600080fd5b3480156100e057600080fd5b506100e96102c9565b6040516100f69190610b85565b60405180910390f35b34801561010b57600080fd5b506101146102cf565b6040516101219190610b85565b60405180910390f35b34801561013657600080fd5b5061013f6102d5565b60405161014c9190610bbb565b60405180910390f35b34801561016157600080fd5b5061016a6102e8565b6040516101779190610b85565b60405180910390f35b34801561018c57600080fd5b506101956102ee565b005b3480156101a357600080fd5b506101be60048036038101906101b99190610c39565b61055f565b6040516101cb9190610b85565b60405180910390f35b3480156101e057600080fd5b506101e9610577565b6040516101f69190610c75565b60405180910390f35b34801561020b57600080fd5b5061022660048036038101906102219190610c39565b61059b565b6040516102339190610b85565b60405180910390f35b34801561024857600080fd5b506102516105e4565b604051610262959493929190610c90565b60405180910390f35b34801561027757600080fd5b50610280610626565b60405161028d9190610bbb565b60405180910390f35b3480156102a257600080fd5b506102ab610639565b005b6102c760048036038101906102c29190610d3b565b610996565b005b60025481565b60015481565b600560009054906101000a900460ff1681565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037390610e11565b60405180910390fd5b6004544210156103c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b890610e7d565b60405180910390fd5b600560009054906101000a900460ff16610410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040790610ee9565b60405180910390fd5b600060015411610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044c90610f55565b60405180910390fd5b60006001549050600060018190555060006002819055506000600560006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104ed573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6c7e671ec35e723fdd21e81a2b98109fd74878e3233ac1c04dec9a61864c1cbd826040516105549190610b85565b60405180910390a250565b60066020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000806000600154600254600360009054906101000a900460ff16600454600560009054906101000a900460ff16945094509450945094509091929394565b600360009054906101000a900460ff1681565b600454421061067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067490610fc1565b60405180910390fd5b600560009054906101000a900460ff166106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390610ee9565b60405180910390fd5b600060025411610711576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061102d565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078a90611099565b60405180910390fd5b6000600360009054906101000a900460ff16156107c1576002546001546107ba9190611117565b9050610863565b60006001436107d09190611148565b4033426040516020016107e59392919061121c565b60405160208183030381529060405280519060200120600190049050600160025403610815576001549150610861565b600060025460026001546108299190611259565b6108339190611117565b905060018183610843919061129b565b61084d91906112cc565b925060015483111561085f5760015492505b505b505b6002600081548092919061087690611300565b9190505550806001600082825461088d9190611148565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561091e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f26b3a35a04d124f665fdad928ff612eb69b1b4fe23a769536242ff39faa5a7d3826040516109659190610b85565b60405180910390a2600060025403610993576000600560006101000a81548160ff0219169083151502179055505b50565b600560009054906101000a900460ff16156109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90611375565b60405180910390fd5b60003411610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a20906113e1565b60405180910390fd5b60008311610a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a639061144d565b60405180910390fd5b82341015610aaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa6906114df565b60405180910390fd5b8260028190555081600360006101000a81548160ff02191690831515021790555034600181905550610e1081610ae59190611259565b42610af091906112cc565b6004819055506001600560006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f45d388fd608525f7322e93b02272cceaa48fd7e04bdfd3f4559fdc1ba9435c2e348585600454604051610b5f94939291906114ff565b60405180910390a2505050565b6000819050919050565b610b7f81610b6c565b82525050565b6000602082019050610b9a6000830184610b76565b92915050565b60008115159050919050565b610bb581610ba0565b82525050565b6000602082019050610bd06000830184610bac565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c0682610bdb565b9050919050565b610c1681610bfb565b8114610c2157600080fd5b50565b600081359050610c3381610c0d565b92915050565b600060208284031215610c4f57610c4e610bd6565b5b6000610c5d84828501610c24565b91505092915050565b610c6f81610bfb565b82525050565b6000602082019050610c8a6000830184610c66565b92915050565b600060a082019050610ca56000830188610b76565b610cb26020830187610b76565b610cbf6040830186610bac565b610ccc6060830185610b76565b610cd96080830184610bac565b9695505050505050565b610cec81610b6c565b8114610cf757600080fd5b50565b600081359050610d0981610ce3565b92915050565b610d1881610ba0565b8114610d2357600080fd5b50565b600081359050610d3581610d0f565b92915050565b600080600060608486031215610d5457610d53610bd6565b5b6000610d6286828701610cfa565b9350506020610d7386828701610d26565b9250506040610d8486828701610cfa565b9150509250925092565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000610dfb602183610d8e565b9150610e0682610d9f565b604082019050919050565b60006020820190508181036000830152610e2a81610dee565b9050919050565b7f4e6f742065787069726564207965740000000000000000000000000000000000600082015250565b6000610e67600f83610d8e565b9150610e7282610e31565b602082019050919050565b60006020820190508181036000830152610e9681610e5a565b9050919050565b7f4e6f2061637469766520726564207061636b6574000000000000000000000000600082015250565b6000610ed3601483610d8e565b9150610ede82610e9d565b602082019050919050565b60006020820190508181036000830152610f0281610ec6565b9050919050565b7f4e6f20616d6f756e7420746f20726566756e6400000000000000000000000000600082015250565b6000610f3f601383610d8e565b9150610f4a82610f09565b602082019050919050565b60006020820190508181036000830152610f6e81610f32565b9050919050565b7f526564207061636b657420686173206578706972656400000000000000000000600082015250565b6000610fab601683610d8e565b9150610fb682610f75565b602082019050919050565b60006020820190508181036000830152610fda81610f9e565b9050919050565b7f4e6f20726564207061636b657473206c65667400000000000000000000000000600082015250565b6000611017601383610d8e565b915061102282610fe1565b602082019050919050565b600060208201905081810360008301526110468161100a565b9050919050565b7f416c726561647920677261626265640000000000000000000000000000000000600082015250565b6000611083600f83610d8e565b915061108e8261104d565b602082019050919050565b600060208201905081810360008301526110b281611076565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061112282610b6c565b915061112d83610b6c565b92508261113d5761113c6110b9565b5b828204905092915050565b600061115382610b6c565b915061115e83610b6c565b9250828203905081811115611176576111756110e8565b5b92915050565b6000819050919050565b6000819050919050565b6111a161119c8261117c565b611186565b82525050565b60006c0100000000000000000000000082029050919050565b60006111cb826111a7565b9050919050565b60006111dd826111c0565b9050919050565b6111f56111f082610bfb565b6111d2565b82525050565b6000819050919050565b61121661121182610b6c565b6111fb565b82525050565b60006112288286611190565b60208201915061123882856111e4565b6014820191506112488284611205565b602082019150819050949350505050565b600061126482610b6c565b915061126f83610b6c565b925082820261127d81610b6c565b91508282048414831517611294576112936110e8565b5b5092915050565b60006112a682610b6c565b91506112b183610b6c565b9250826112c1576112c06110b9565b5b828206905092915050565b60006112d782610b6c565b91506112e283610b6c565b92508282019050808211156112fa576112f96110e8565b5b92915050565b600061130b82610b6c565b91506000820361131e5761131d6110e8565b5b600182039050919050565b7f4120726564207061636b657420697320616c7265616479206163746976650000600082015250565b600061135f601e83610d8e565b915061136a82611329565b602082019050919050565b6000602082019050818103600083015261138e81611352565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b60006113cb601d83610d8e565b91506113d682611395565b602082019050919050565b600060208201905081810360008301526113fa816113be565b9050919050565b7f436f756e74206d7573742062652067726561746572207468616e203000000000600082015250565b6000611437601c83610d8e565b915061144282611401565b602082019050919050565b600060208201905081810360008301526114668161142a565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e20636f756e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b60006114c9602183610d8e565b91506114d48261146d565b604082019050919050565b600060208201905081810360008301526114f8816114bc565b9050919050565b60006080820190506115146000830187610b76565b6115216020830186610b76565b61152e6040830185610bac565b61153b6060830184610b76565b9594505050505056fea264697066735822122075ca4960d9063becef72e82d9f4ae7c2b97611b2799d690f41c705f68e2da16b64736f6c634300081c0033";

type RedPacketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RedPacketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RedPacket__factory extends ContractFactory {
  constructor(...args: RedPacketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<RedPacket> {
    return super.deploy(overrides || {}) as Promise<RedPacket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RedPacket {
    return super.attach(address) as RedPacket;
  }
  override connect(signer: Signer): RedPacket__factory {
    return super.connect(signer) as RedPacket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RedPacketInterface {
    return new utils.Interface(_abi) as RedPacketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RedPacket {
    return new Contract(address, _abi, signerOrProvider) as RedPacket;
  }
}
